{"version":3,"file":"static/js/135.5847169e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/pages/MovieDetails/MovieDetails.module.css?0c24","pages/MovieDetails/MovieDetails.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"containerMovieDetails\":\"MovieDetails_containerMovieDetails__7Q5RO\",\"backBtn\":\"MovieDetails_backBtn__rLQ3F\",\"img\":\"MovieDetails_img__uOAom\",\"useScore\":\"MovieDetails_useScore__+FPD3\",\"overview\":\"MovieDetails_overview__U5Vnb\",\"moreInfo\":\"MovieDetails_moreInfo__iU6Rb\",\"moreInfoLink\":\"MovieDetails_moreInfoLink__v7Q4i\"};","import React, { useEffect, useState, lazy, Suspense } from \"react\";\nimport { Link, Route, Routes, useParams, useLocation } from \"react-router-dom\";\nimport Notiflix from \"notiflix\";\nimport { getMovieDetails } from \"services/api\";\nimport Loader from \"components/Loader/Loader\";\nimport css from \"./MovieDetails.module.css\";\n\nconst Cast = lazy(() => import(\"pages/Cast/Cast\"));\nconst Reviews = lazy(() => import(\"pages/Reviews/Reviews\"));\n\nfunction MovieDetails() {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    const fetchDetails = async (id) => {\n      try {\n        const movieInfo = await getMovieDetails(id);\n        setMovieInfo(movieInfo);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDetails(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notiflix.Notify.failure(`Something went wrong: ${error}`);\n  }, [error]);\n\n  return (\n    <div className={css.containerMovieDetails}>\n      <Link className={css.backBtn} to={location?.state?.from ?? \"/\"}>\n        &#8592; Go back\n      </Link>\n      {isLoading && <Loader />}\n      <div>\n        {movieInfo !== null && (\n          <div>\n            <div>\n              <img\n                src={\n                  movieInfo?.poster_path\n                    ? `https://image.tmdb.org/t/p/w500${movieInfo?.poster_path}`\n                    : \"https://cdn4.iconfinder.com/data/icons/ui-beast-4/32/Ui-12-512.png\"\n                }\n                alt={movieInfo.title}\n                className={css.img}\n              />\n            </div>\n            <div className={css.info}>\n              <h1>\n                {movieInfo.title} ({movieInfo?.release_date.slice(0, 4)})\n              </h1>\n              <p className={css.useScore}>\n                User Score: {movieInfo?.vote_average}\n              </p>\n              <h2>Overview</h2>\n              <p className={css.overview}>{movieInfo.overview}</p>\n              <h2>Genres</h2>\n              <ul className={css.genre}>\n                {movieInfo?.genres?.map(({ id, name }) => {\n                  return (\n                    <li key={id} className={css.genreItem}>\n                      {name}\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          </div>\n        )}\n        <div className={css.moreInfo}>\n          <h2>More info</h2>\n          <Link\n            state={{ from: location?.state?.from ?? \"/\" }}\n            className={css.moreInfoLink}\n            to=\"reviews\"\n          >\n            Reviews\n          </Link>\n          <Link\n            state={{ from: location?.state?.from ?? \"/\" }}\n            className={css.moreInfoLink}\n            to=\"cast\"\n          >\n            Cast\n          </Link>\n\n          <Suspense fallback={<Loader />}>\n            <Routes>\n              <Route path=\"cast\" element={<Cast />} />\n              <Route path=\"reviews\" element={<Reviews />} />\n            </Routes>\n          </Suspense>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n","import axios from \"axios\";\n\nconst URL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"af592fcf36199c3713f718a30eaa3789\";\n\nconst moviesAPI = axios.create({\n  baseURL: URL,\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendingMovies = async () => {\n  const { data } = await moviesAPI.get(\"trending/all/week\");\n  return data.results;\n};\n\nexport const getSearchMovies = async (query) => {\n  const { data } = await moviesAPI.get(\"search/movie\", {\n    params: { query },\n  });\n  return data.results;\n};\n\nexport const getMovieDetails = async (id) => {\n  const { data } = await moviesAPI.get(`movie/${id}`);\n  return data;\n};\n\nexport const getMovieCredits = async (id) => {\n  const { data } = await moviesAPI.get(`movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getMovieReviews = async (id) => {\n  const { data } = await moviesAPI.get(`movie/${id}/reviews`, {\n    params: {\n      page: 1,\n    },\n  });\n  return data.results;\n};\n"],"names":["Cast","lazy","Reviews","useState","movieInfo","setMovieInfo","isLoading","setIsLoading","error","setError","movieId","useParams","location","useLocation","useEffect","fetchDetails","id","getMovieDetails","message","Notiflix","className","css","to","state","from","Loader","src","poster_path","alt","title","release_date","slice","vote_average","overview","genres","map","name","Suspense","fallback","path","element","moviesAPI","axios","baseURL","params","api_key","getTrendingMovies","get","data","results","getSearchMovies","query","getMovieCredits","cast","getMovieReviews","page"],"sourceRoot":""}