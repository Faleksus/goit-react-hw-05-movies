{"version":3,"file":"static/js/459.320a3f97.chunk.js","mappings":"iRACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA0E,kBAA1E,EAAyG,yB,SC4DzG,MAtDA,WACE,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACAH,GAAa,GACb,IAAMM,EAAS,mCAAG,WAAOC,GAAP,iGAEUC,EAAAA,EAAAA,IAAgBD,GAF1B,OAERV,EAFQ,OAGdC,EAAaD,GAHC,gDAKdK,EAAS,KAAIO,SALC,yBAOdT,GAAa,GAPC,4EAAH,sDAWfM,EAAUH,EAbU,CAcrB,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACM,OAAVJ,GACJS,IAAAA,OAAAA,QAAA,gCAAiDT,GAClD,GAAE,CAACA,KAGF,gCACGF,IAAa,SAACY,EAAA,EAAD,KACd,eAAIC,UAAWC,EAAf,SACGC,MAAMC,QAAQlB,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAWmB,KAAI,YAA0C,IAAvCT,EAAsC,EAAtCA,GAAIU,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,aACnC,OACE,gBAAaN,UAAWC,EAAxB,WACE,gBACED,UAAWC,EACXM,IACED,EAAY,yCAC0BA,GAClC,qEAENE,IAAKH,KAEP,eAAIL,UAAWC,EAAf,SAAgCI,MAVzBV,EAaZ,SAIV,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Cast/Cast.module.css?cfbb","pages/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Cast_list__oOD41\",\"item\":\"Cast_item__vxHbm\",\"img\":\"Cast_img__uVPra\",\"headerCast\":\"Cast_headerCast__Mxhqq\"};","import Loader from \"components/Loader/Loader\";\nimport Notiflix from \"notiflix\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieCredits } from \"services/api\";\nimport css from \"./Cast.module.css\";\n\nfunction Cast() {\n  const [movieCast, setMovieCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    const fetchCast = async (id) => {\n      try {\n        const movieCast = await getMovieCredits(id);\n        setMovieCast(movieCast);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchCast(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notiflix.Notify.failure(`Something went wrong: ${error}`);\n  }, [error]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ul className={css.list}>\n        {Array.isArray(movieCast) &&\n          movieCast?.map(({ id, original_name, profile_path }) => {\n            return (\n              <li key={id} className={css.item}>\n                <img\n                  className={css.img}\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : \"https://cdn4.iconfinder.com/data/icons/ui-beast-4/32/Ui-12-512.png\"\n                  }\n                  alt={original_name}\n                />\n                <h3 className={css.headerCast}>{original_name}</h3>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["useState","movieCast","setMovieCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchCast","id","getMovieCredits","message","Notiflix","Loader","className","css","Array","isArray","map","original_name","profile_path","src","alt"],"sourceRoot":""}