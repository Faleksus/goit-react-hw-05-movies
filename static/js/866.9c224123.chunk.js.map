{"version":3,"file":"static/js/866.9c224123.chunk.js","mappings":"iRACA,EAAuB,sBAAvB,EAAoD,sBAApD,EAAwF,6BAAxF,EAA2H,qBAA3H,EAAgK,+B,SCoEhK,MA9DA,WACE,OAAwCA,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAwBR,OAtBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CACAH,GAAa,GACb,IAAMM,EAAY,mCAAG,WAAOC,GAAP,iGAEUC,EAAAA,EAAAA,IAAgBD,GAF1B,OAEXV,EAFW,OAGjBC,EAAgBD,GAHC,gDAKjBK,EAAS,KAAIO,SALI,yBAOjBT,GAAa,GAPI,4EAAH,sDAWlBM,EAAaH,EAbO,CAcrB,GAAE,CAACA,KAEJE,EAAAA,EAAAA,YAAU,WACM,OAAVJ,GACJS,IAAAA,OAAAA,QAAA,gCAAiDT,GAClD,GAAE,CAACA,KAGF,gCACGF,IAAa,SAACY,EAAA,EAAD,KACd,eAAIC,UAAWC,EAAf,SACGC,MAAMC,QAAQlB,KAAd,OACCA,QADD,IACCA,OADD,EACCA,EAAcmB,KAAI,YAAqC,IAAlCT,EAAiC,EAAjCA,GAAIU,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,eAC/B,OACE,gBAAaN,UAAWC,EAAxB,WACE,gBACED,UAAWC,EACXM,IACED,EAAeE,YAAf,yCACsCF,EAAeE,aACjD,qEAENC,IAAKH,EAAeI,QAEtB,iBAAKV,UAAWC,EAAhB,WACE,gBAAID,UAAWC,EAAf,qBAA2CI,MAC3C,eAAGL,UAAWC,EAAd,uBACaK,EAAeK,aAE5B,eAAGX,UAAWC,EAAd,qBACWK,EAAeM,eAhBrBjB,EAqBZ,SAIV,C","sources":["webpack://goit-react-hw-05-movies/./src/pages/Reviews/Reviews.module.css?9a3e","pages/Reviews/Reviews.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"Reviews_list__pCzae\",\"item\":\"Reviews_item__G1rz-\",\"headerBlock\":\"Reviews_headerBlock__HgS-i\",\"img\":\"Reviews_img__eQ064\",\"headerReviews\":\"Reviews_headerReviews__einWc\"};","import Loader from \"components/Loader/Loader\";\nimport Notiflix from \"notiflix\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieReviews } from \"services/api\";\nimport css from \"./Reviews.module.css\";\n\nfunction Reviews() {\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) return;\n    setIsLoading(true);\n    const fetchReviews = async (id) => {\n      try {\n        const movieReviews = await getMovieReviews(id);\n        setMovieReviews(movieReviews);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchReviews(movieId);\n  }, [movieId]);\n\n  useEffect(() => {\n    if (error === null) return;\n    Notiflix.Notify.failure(`Something went wrong: ${error}`);\n  }, [error]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      <ul className={css.list}>\n        {Array.isArray(movieReviews) &&\n          movieReviews?.map(({ id, author, author_details }) => {\n            return (\n              <li key={id} className={css.item}>\n                <img\n                  className={css.img}\n                  src={\n                    author_details.avatar_path\n                      ? `https://image.tmdb.org/t/p/w500${author_details.avatar_path}`\n                      : \"https://cdn4.iconfinder.com/data/icons/ui-beast-4/32/Ui-12-512.png\"\n                  }\n                  alt={author_details.name}\n                />\n                <div className={css.headerBlock}>\n                  <h3 className={css.headerReviews}>Author: {author}</h3>\n                  <p className={css.headerReviews}>\n                    Username: {author_details.username}\n                  </p>\n                  <p className={css.headerReviews}>\n                    Rating: {author_details.rating}\n                  </p>\n                </div>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n}\n\nexport default Reviews;\n"],"names":["useState","movieReviews","setMovieReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","fetchReviews","id","getMovieReviews","message","Notiflix","Loader","className","css","Array","isArray","map","author","author_details","src","avatar_path","alt","name","username","rating"],"sourceRoot":""}